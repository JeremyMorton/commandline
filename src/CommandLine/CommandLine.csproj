<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <Description>Terse syntax C# command line parser for .NET with F# support. The Command Line Parser Library offers to CLR applications a clean and concise API for manipulating command line arguments and related tasks.</Description>
    <AssemblyTitle>Command Line Parser Library</AssemblyTitle>
    <VersionPrefix>2.1.2</VersionPrefix>
    <Authors>Giacomo Stelluti Scala</Authors>
    <TargetFrameworks>netstandard2.0</TargetFrameworks>
    <DefineConstants>$(DefineConstants);CSX_REM_EITHER_FUNC;SKIP_FSHARP</DefineConstants>
    <AssemblyName>CommandLine</AssemblyName>
    <AssemblyOriginatorKeyFile>../../CommandLine.snk</AssemblyOriginatorKeyFile>
    <SignAssembly>true</SignAssembly>
    <PublicSign Condition=" '$(OS)' != 'Windows_NT' ">true</PublicSign>
    <PackageId>CommandLine</PackageId>
    <PackageLicenseUrl>https://raw.githubusercontent.com/gsscoder/commandline/master/doc/LICENSE</PackageLicenseUrl>
    <RepositoryType>git</RepositoryType>
    <RepositoryUrl>https://github.com/gsscoder/commandline</RepositoryUrl>
    <GenerateAssemblyTitleAttribute>false</GenerateAssemblyTitleAttribute>
    <GenerateAssemblyDescriptionAttribute>false</GenerateAssemblyDescriptionAttribute>
    <GenerateAssemblyConfigurationAttribute>false</GenerateAssemblyConfigurationAttribute>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="..\..\paket-files\gsscoder\CSharpx\src\CSharpx\Maybe.cs">
      <Paket>True</Paket>
      <Link>Infrastructure/Maybe.cs</Link>
    </Compile>
    <Compile Include="..\..\paket-files\gsscoder\CSharpx\src\CSharpx\EnumerableExtensions.cs">
      <Paket>True</Paket>
      <Link>Infrastructure/EnumerableExtensions.cs</Link>
    </Compile>
    <Compile Include="..\..\paket-files\gsscoder\railwaysharp\src\RailwaySharp\ErrorHandling.cs">
      <Paket>True</Paket>
      <Link>Infrastructure/ErrorHandling.cs</Link>
    </Compile>
    <Compile Remove="..\CommandLine\obj\**" />
  </ItemGroup>
  <ItemGroup Condition=" '$(TargetFramework)' == 'netstandard2.0' ">
    <PackageReference Include="System.Runtime.Extensions" Version="4.3.0" />
    <PackageReference Include="System.Globalization" Version="4.3.0" />
    <PackageReference Include="System.Linq.Expressions" Version="4.3.0" />
    <PackageReference Include="System.Linq" Version="4.3.0" />
    <PackageReference Include="System.Linq.Dynamic.Core" Version="1.0.7.6" />
    <PackageReference Include="System.Diagnostics.Debug" Version="4.3.0" />
    <PackageReference Include="System.Console" Version="4.3.0" />
    <PackageReference Include="System.Reflection.Extensions" Version="4.3.0" />
    <PackageReference Include="System.Text.RegularExpressions" Version="4.3.0" />
  </ItemGroup>
  <ItemGroup Condition=" '$(TargetFramework)' == 'net47' ">
    <Reference Include="System" />
    <Reference Include="FSharp.Core" />
    <Reference Include="Microsoft.CSharp" />
  </ItemGroup>
  <Target Name="BeforeBuild" DependsOnTargets="PaketInstall">
  </Target>
  <Target Name="BootstrapPaket" Condition="!Exists('$(SolutionDir).paket/paket.bootstrapper.exe)')">
    <Exec Command="$(SolutionDir).paket/paket.bootstrapper.exe" />
  </Target>
  <Target Name="PaketInstall" DependsOnTargets="BootstrapPaket" Condition="!Exists('$(SolutionDir)paket-files')">
    <Exec Command="$(SolutionDir).paket/paket install" />
  </Target>
  <Import Project="..\..\.paket\Paket.Restore.targets" />
</Project>